.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_plot_choropleth_map_population.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_choropleth_map_population.py:


Population by macroregion
=========================

In this example we want to visualize the most recent data on
brazilian population by macroregion.

Let's first retrieve the data with the `seriesbr <seriesbr.readthedocs.io>`_ package.


.. code-block:: default


    from seriesbr import ibge

    population = ibge.get_series(6462, 606, macroregions=True, last_n=1)

    population






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>Grande Região (Código)</th>
              <th>Grande Região</th>
              <th>Trimestre</th>
              <th>Variável (Código)</th>
              <th>Variável</th>
              <th>Valor</th>
            </tr>
            <tr>
              <th>Date</th>
              <th></th>
              <th></th>
              <th></th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>2019-03-01</th>
              <td>1</td>
              <td>Norte</td>
              <td>3º trimestre 2019</td>
              <td>606</td>
              <td>População</td>
              <td>18138</td>
            </tr>
            <tr>
              <th>2019-03-01</th>
              <td>2</td>
              <td>Nordeste</td>
              <td>3º trimestre 2019</td>
              <td>606</td>
              <td>População</td>
              <td>56967</td>
            </tr>
            <tr>
              <th>2019-03-01</th>
              <td>3</td>
              <td>Sudeste</td>
              <td>3º trimestre 2019</td>
              <td>606</td>
              <td>População</td>
              <td>88423</td>
            </tr>
            <tr>
              <th>2019-03-01</th>
              <td>4</td>
              <td>Sul</td>
              <td>3º trimestre 2019</td>
              <td>606</td>
              <td>População</td>
              <td>29955</td>
            </tr>
            <tr>
              <th>2019-03-01</th>
              <td>5</td>
              <td>Centro-Oeste</td>
              <td>3º trimestre 2019</td>
              <td>606</td>
              <td>População</td>
              <td>16196</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

Then let's convert this `DataFrame` into a `GeoDataFrame` and assign
to a column named "geometry" the macroregions' geometric objects.

You can get a geometric object for a given location with the function
:py:func:`mapsbr.ibgemaps.geocode`. It can either be a location code or name. If
it's a name, you'll need to pass its geographic level as the argument `geolevel` so
it can properly get converted to a code.

For example, `ibgemaps.geocode("Rio de Janeiro", geolevel="state")` if you want Rio
de Janeiro state map or `ibgemaps.geocode("Rio de Janeiro", geolevel="municipality")` if
the map for Rio de Janeiro city.

Notice that the column with the geometric objects *has* to be named geometry. Otherwise
you'll need to call the `set_geometry("geometries_column")` method on the `GeoDataFrame`.


.. code-block:: default


    import geopandas as gpd
    from mapsbr import ibgemaps

    gdf = gpd.GeoDataFrame(population)
    gdf["geometry"] = ibgemaps.geocode(population["Grande Região"], geolevel="macroregion")
    gdf.plot(column="Valor", legend=True, edgecolor="w")

    import matplotlib.pyplot as plt

    plt.gca().axis("off")
    plt.show()



.. image:: /gallery/images/sphx_glr_plot_choropleth_map_population_001.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.400 seconds)

**Estimated memory usage:**  19 MB


.. _sphx_glr_download_gallery_plot_choropleth_map_population.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_choropleth_map_population.py <plot_choropleth_map_population.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_choropleth_map_population.ipynb <plot_choropleth_map_population.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
